// src/pages/dashboard/history.js - Updated dengan real data dan PDF export
import Layout from "../../components/common/Layout";
import { useState, useEffect } from "react";
import { useSensorData } from "../../context/SensorContext";
import {
  Search,
  Calendar,
  Filter,
  Download,
  CheckCircle,
  AlertTriangle,
  Eye,
  ChevronDown,
  FileText,
} from "lucide-react";

// Function untuk generate PDF (menggunakan browser print)
const generatePDF = (data, dateRange) => {
  const printWindow = window.open("", "_blank");

  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Sensor Data Report</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 10px; }
        .summary { background: #f5f5f5; padding: 15px; margin: 20px 0; border-radius: 5px; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; font-size: 12px; }
        th { background-color: #f2f2f2; font-weight: bold; }
        .stats { display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin: 20px 0; }
        .stat-box { background: #f9f9f9; padding: 15px; border-radius: 5px; text-align: center; }
        .alert { color: red; font-weight: bold; }
        @media print { .no-print { display: none; } }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>PkM Lab Sensor Data Report</h1>
        <p>Generated on: ${new Date().toLocaleString()}</p>
        <p>Period: ${dateRange || "All Time"}</p>
      </div>
      
      <div class="summary">
        <h2>Summary Statistics</h2>
        <div class="stats">
          <div class="stat-box">
            <h3>Total Records</h3>
            <p style="font-size: 24px; color: #333;">${data.length}</p>
          </div>
          <div class="stat-box">
            <h3>Average Temperature</h3>
            <p style="font-size: 24px; color: #333;">
              ${
                data.length > 0
                  ? (
                      data.reduce(
                        (sum, item) => sum + parseFloat(item.temperature || 0),
                        0
                      ) / data.length
                    ).toFixed(1)
                  : 0
              }°C
            </p>
          </div>
          <div class="stat-box">
            <h3>Average Humidity</h3>
            <p style="font-size: 24px; color: #333;">
              ${
                data.length > 0
                  ? (
                      data.reduce(
                        (sum, item) => sum + parseFloat(item.humidity || 0),
                        0
                      ) / data.length
                    ).toFixed(1)
                  : 0
              }%
            </p>
          </div>
          <div class="stat-box">
            <h3>Average Soil Moisture</h3>
            <p style="font-size: 24px; color: #333;">
              ${
                data.length > 0
                  ? (
                      data.reduce(
                        (sum, item) => sum + parseFloat(item.soilHumidity || 0),
                        0
                      ) / data.length
                    ).toFixed(1)
                  : 0
              }%
            </p>
          </div>
        </div>
      </div>

      <h2>Detailed Data</h2>
      <table>
        <thead>
          <tr>
            <th>Timestamp</th>
            <th>Temperature (°C)</th>
            <th>Air Humidity (%)</th>
            <th>Soil Moisture (%)</th>
            <th>Wind Speed (km/h)</th>
            <th>Rain Detection</th>
          </tr>
        </thead>
        <tbody>
          ${data
            .map(
              (item) => `
            <tr>
              <td>${new Date(item.timestamp).toLocaleString()}</td>
              <td>${item.temperature || "--"}</td>
              <td>${item.humidity || "--"}</td>
              <td>${item.soilHumidity || "--"}</td>
              <td>${item.windSpeed || "--"}</td>
              <td>${item.rainDetection ? "Yes" : "No"}</td>
            </tr>
          `
            )
            .join("")}
        </tbody>
      </table>
      
      <div style="margin-top: 30px; text-align: center; color: #666; font-size: 12px;">
        <p>Report generated by PkM Lab Dashboard System</p>
      </div>
      
      <script>
        window.onload = function() {
          window.print();
          window.onafterprint = function() {
            window.close();
          }
        }
      </script>
    </body>
    </html>
  `;

  printWindow.document.write(htmlContent);
  printWindow.document.close();
};

export default function HistoryPage() {
  const { sensorHistory } = useSensorData();
  const [searchTerm, setSearchTerm] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [filterType, setFilterType] = useState("all");
  const [message, setMessage] = useState("");
  const [isSuccess, setIsSuccess] = useState(false);
  const [viewMode, setViewMode] = useState("table");
  const [expandedRows, setExpandedRows] = useState(new Set());

  // Convert context data to history format
  const historicalData = sensorHistory.map((item) => ({
    id: item.id,
    time: item.timestamp,
    temperature: item.temperature?.toString(),
    humidity: item.humidity?.toString(),
    soilHumidity: item.soilHumidity?.toString(),
    windSpeed: item.windSpeed?.toString(),
    rainDetection: item.rainDetection ? "Ya" : "Tidak",
  }));

  // Jika tidak ada data dari context, gunakan dummy data
  const dummyData = Array.from({ length: 20 }, (_, i) => ({
    id: i + 1,
    time: `2025-08-${String(20 - Math.floor(i / 3)).padStart(2, "0")} ${String(
      23 - (i % 3) * 8
    ).padStart(2, "0")}:00`,
    temperature: (Math.random() * 5 + 23).toFixed(1),
    humidity: (Math.random() * 10 + 55).toFixed(1),
    soilHumidity: (Math.random() * 15 + 30).toFixed(1),
    windSpeed: (Math.random() * 5 + 8).toFixed(1),
    rainDetection: Math.random() > 0.8 ? "Ya" : "Tidak",
  })).sort((a, b) => new Date(b.time) - new Date(a.time));

  const finalData = historicalData.length > 0 ? historicalData : dummyData;

  // Filter logic
  const filteredData = finalData.filter((item) => {
    const matchesSearch = Object.values(item).some((val) =>
      String(val).toLowerCase().includes(searchTerm.toLowerCase())
    );

    const itemDate = new Date(item.time);
    const matchesStartDate = startDate ? itemDate >= new Date(startDate) : true;
    const matchesEndDate = endDate ? itemDate <= new Date(endDate) : true;

    let matchesType = true;
    if (filterType !== "all") {
      if (filterType === "temperature" && !item.temperature)
        matchesType = false;
      if (filterType === "humidity" && !item.humidity) matchesType = false;
      if (filterType === "rain" && item.rainDetection === "Tidak")
        matchesType = false;
    }

    return matchesSearch && matchesStartDate && matchesEndDate && matchesType;
  });

  const handleExport = () => {
    setMessage("Generating PDF report...");
    setIsSuccess(true);

    try {
      const dateRange =
        startDate && endDate
          ? `${new Date(startDate).toLocaleDateString()} - ${new Date(
              endDate
            ).toLocaleDateString()}`
          : null;

      // Convert filtered data ke format untuk PDF
      const exportData = filteredData.map((item) => ({
        timestamp: item.time,
        temperature: item.temperature,
        humidity: item.humidity,
        soilHumidity: item.soilHumidity,
        windSpeed: item.windSpeed,
        rainDetection: item.rainDetection === "Ya",
      }));

      generatePDF(exportData, dateRange);

      setTimeout(() => {
        setMessage("PDF report generated successfully!");
        setIsSuccess(true);
      }, 1000);
    } catch (error) {
      console.error("Export error:", error);
      setMessage("Error generating PDF report!");
      setIsSuccess(false);
    }
  };

  const toggleRowExpansion = (id) => {
    const newExpanded = new Set(expandedRows);
    if (newExpanded.has(id)) {
      newExpanded.delete(id);
    } else {
      newExpanded.add(id);
    }
    setExpandedRows(newExpanded);
  };

  // Calculate statistics
  const getStats = () => {
    if (filteredData.length === 0) return { avg: {}, min: {}, max: {} };

    const temperatures = filteredData.map((item) =>
      parseFloat(item.temperature || 0)
    );
    const humidities = filteredData.map((item) =>
      parseFloat(item.humidity || 0)
    );
    const soilHumidities = filteredData.map((item) =>
      parseFloat(item.soilHumidity || 0)
    );
    const windSpeeds = filteredData.map((item) =>
      parseFloat(item.windSpeed || 0)
    );

    return {
      avg: {
        temperature: (
          temperatures.reduce((a, b) => a + b, 0) / temperatures.length
        ).toFixed(1),
        humidity: (
          humidities.reduce((a, b) => a + b, 0) / humidities.length
        ).toFixed(1),
        soilHumidity: (
          soilHumidities.reduce((a, b) => a + b, 0) / soilHumidities.length
        ).toFixed(1),
        windSpeed: (
          windSpeeds.reduce((a, b) => a + b, 0) / windSpeeds.length
        ).toFixed(1),
      },
      min: {
        temperature: Math.min(...temperatures).toFixed(1),
        humidity: Math.min(...humidities).toFixed(1),
        soilHumidity: Math.min(...soilHumidities).toFixed(1),
        windSpeed: Math.min(...windSpeeds).toFixed(1),
      },
      max: {
        temperature: Math.max(...temperatures).toFixed(1),
        humidity: Math.max(...humidities).toFixed(1),
        soilHumidity: Math.max(...soilHumidities).toFixed(1),
        windSpeed: Math.max(...windSpeeds).toFixed(1),
      },
    };
  };

  const stats = getStats();

  const DataCard = ({ item }) => (
    <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm mb-4">
      <div className="flex justify-between items-start mb-3">
        <h3 className="font-semibold text-gray-800 text-sm">
          {new Date(item.time).toLocaleDateString("id-ID", {
            day: "2-digit",
            month: "short",
            year: "numeric",
          })}
        </h3>
        <span className="text-xs text-gray-500">
          {new Date(item.time).toLocaleTimeString("id-ID", {
            hour: "2-digit",
            minute: "2-digit",
          })}
        </span>
      </div>

      <div className="grid grid-cols-2 gap-3 text-sm">
        <div className="flex justify-between">
          <span className="text-gray-600">Suhu:</span>
          <span className="font-medium text-gray-900">
            {item.temperature}°C
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-600">Kelembapan Udara:</span>
          <span className="font-medium text-gray-900">{item.humidity}%</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-600">Kelembapan Tanah:</span>
          <span className="font-medium text-gray-900">
            {item.soilHumidity}%
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-600">Angin:</span>
          <span className="font-medium text-gray-900">
            {item.windSpeed} km/h
          </span>
        </div>
      </div>

      <div className="mt-3 pt-3 border-t border-gray-100 flex justify-between items-center">
        <span className="text-gray-600 text-sm">Hujan:</span>
        <span
          className={`px-2 py-1 text-xs leading-5 font-semibold rounded-full ${
            item.rainDetection === "Ya"
              ? "bg-rose-100 text-rose-800"
              : "bg-green-100 text-green-800"
          }`}
        >
          {item.rainDetection}
        </span>
      </div>
    </div>
  );

  return (
    <Layout title="Histori Data">
      <h1 className="pt-6 text-2xl md:text-3xl text-center font-extrabold text-gray-600 mb-2 md:mb-8 font-calistoga">
        Histori Data Sensor
      </h1>

      {message && (
        <div
          className={`flex items-center p-4 mb-6 rounded-lg shadow-md transition-all duration-300 ${
            isSuccess
              ? "bg-green-100 text-green-700"
              : "bg-rose-100 text-rose-700"
          }`}
        >
          {isSuccess ? (
            <CheckCircle className="w-5 h-5 mr-3 flex-shrink-0" />
          ) : (
            <AlertTriangle className="w-5 h-5 mr-3 flex-shrink-0" />
          )}
          <span className="font-semibold text-sm md:text-base">{message}</span>
        </div>
      )}

      {/* Statistics Summary */}
      {filteredData.length > 0 && (
        <div className="bg-none p-6 rounded-2xl mb-6">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 lg:gap-12">
            <div className="text-center p-4 bg-white rounded-lg border border-gray-300">
              <p className="text-xs text-gray-800">Rata-rata Suhu</p>
              <p className="text-2xl font-bold text-sky-300">
                {stats.avg.temperature}°C
              </p>
            </div>
            <div className="text-center p-4 bg-white/75 backdrop-blur-md rounded-lg border border-gray-300">
              <p className="text-xs text-gray-600">Rata-rata Kelembapan</p>
              <p className="text-2xl font-bold text-gray-500">
                {stats.avg.humidity}%
              </p>
            </div>
            <div className="text-center p-4 bg-white/75 backdrop-blur-md rounded-lg border border-gray-300">
              <p className="text-xs text-gray-600">Rata-rata Soil</p>
              <p className="text-2xl font-bold text-gray-500">
                {stats.avg.soilHumidity}%
              </p>
            </div>
            <div className="text-center p-4 bg-white rounded-lg border border-gray-300">
              <p className="text-xs text-gray-600">Rata-rata Angin</p>
              <p className="text-2xl font-bold text-sky-300">
                {stats.avg.windSpeed} km/h
              </p>
            </div>
          </div>
        </div>
      )}

      <div className="bg-none px-4 md:px-6 rounded-2xl">
        <div className="flex flex-col sm:flex-row justify-center sm:items-center mb-4 pb-3 border-b border-gray-200 gap-5">
          <h2 className="text-lg md:text-xl font-semibold text-gray-800 font-calistoga mb-2 sm:mb-0">
            Data Log Sensor ({filteredData.length} records)
          </h2>

          <div className="hidden md:flex bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setViewMode("table")}
              className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                viewMode === "table"
                  ? "bg-white text-gray-900 shadow-sm"
                  : "text-gray-600 hover:text-gray-900"
              }`}
            >
              Tabel
            </button>
            <button
              onClick={() => setViewMode("cards")}
              className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                viewMode === "cards"
                  ? "bg-white text-gray-900 shadow-sm"
                  : "text-gray-600 hover:text-gray-900"
              }`}
            >
              Kartu
            </button>
          </div>
        </div>

        {/* Filter & Search Controls */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 md:gap-4 mb-6">
          <div className="relative">
            <input
              type="text"
              placeholder="Cari data..."
              className="w-full p-3 pl-10 rounded-lg border border-gray-300 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-400 transition-colors duration-200 text-sm"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-4 h-4" />
          </div>

          <div className="relative">
            <input
              type="date"
              className="w-full p-3 pl-10 rounded-lg border border-gray-300 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-400 transition-colors duration-200 text-sm"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
            />
            <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-4 h-4" />
          </div>

          <div className="relative">
            <input
              type="date"
              className="w-full p-3 pl-10 rounded-lg border border-gray-300 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-400 transition-colors duration-200 text-sm"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
            />
            <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-4 h-4" />
          </div>

          <div className="relative">
            <select
              className="appearance-none w-full p-3 pl-10 pr-10 rounded-lg border border-gray-300 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-400 transition-colors duration-200 text-sm"
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
            >
              <option value="all">Semua Jenis Data</option>
              <option value="temperature">Air Temperature</option>
              <option value="humidity">Air Humidity</option>
              <option value="rain">Rain Detection</option>
            </select>
            <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-4 h-4" />
          </div>
        </div>

        <button
          onClick={handleExport}
          disabled={filteredData.length === 0}
          className="bg-sky-400 hover:bg-sky-300 disabled:bg-gray-400 text-white font-bold py-3 px-4 md:px-6 rounded-lg transition-all duration-300 flex items-center justify-center mb-6 cursor-pointer transform hover:scale-[1.02] w-full sm:w-auto text-sm disabled:cursor-not-allowed"
        >
          <FileText className="mr-2 w-4 h-4" /> Ekspor Laporan PDF
        </button>

        {/* Data Display */}
        <div className="block md:hidden">
          {filteredData.length > 0 ? (
            <div className="space-y-3">
              {filteredData.map((item) => (
                <DataCard key={item.id} item={item} />
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-gray-500">
              Tidak ada data yang ditemukan.
              {historicalData.length === 0 && (
                <p className="text-sm mt-2">
                  Mulai dashboard untuk mengumpulkan data sensor.
                </p>
              )}
            </div>
          )}
        </div>

        <div className="hidden md:block">
          {viewMode === "table" ? (
            <div className="overflow-x-auto rounded-lg border border-gray-200">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 lg:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Waktu
                    </th>
                    <th className="px-4 lg:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Suhu °C
                    </th>
                    <th className="px-4 lg:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Kelembapan Udara(%)
                    </th>
                    <th className="px-4 lg:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Kelembapan Tanah (%)
                    </th>
                    <th className="px-4 lg:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Kecepatan Angin(km/h)
                    </th>
                    <th className="px-4 lg:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Hujan
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredData.length > 0 ? (
                    filteredData.map((item) => (
                      <tr key={item.id} className="hover:bg-gray-50">
                        <td className="px-4 lg:px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          <div className="flex flex-col">
                            <span>
                              {new Date(item.time).toLocaleDateString("id-ID")}
                            </span>
                            <span className="text-xs text-gray-500">
                              {new Date(item.time).toLocaleTimeString("id-ID", {
                                hour: "2-digit",
                                minute: "2-digit",
                              })}
                            </span>
                          </div>
                        </td>
                        <td className="px-4 lg:px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {item.temperature}
                        </td>
                        <td className="px-4 lg:px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {item.humidity}
                        </td>
                        <td className="px-4 lg:px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {item.soilHumidity}
                        </td>
                        <td className="px-4 lg:px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {item.windSpeed}
                        </td>
                        <td className="px-4 lg:px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          <span
                            className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                              item.rainDetection === "Ya"
                                ? "bg-rose-100 text-rose-800"
                                : "bg-green-100 text-green-800"
                            }`}
                          >
                            {item.rainDetection}
                          </span>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td
                        colSpan="6"
                        className="px-6 py-8 text-center text-gray-500"
                      >
                        Tidak ada data yang ditemukan.
                        {historicalData.length === 0 && (
                          <div className="text-sm mt-2 text-blue-600">
                            Mulai dashboard untuk mengumpulkan data sensor.
                          </div>
                        )}
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4">
              {filteredData.length > 0 ? (
                filteredData.map((item) => (
                  <DataCard key={item.id} item={item} />
                ))
              ) : (
                <div className="col-span-full text-center py-8 text-gray-500">
                  Tidak ada data yang ditemukan.
                  {historicalData.length === 0 && (
                    <p className="text-sm mt-2 text-blue-600">
                      Mulai dashboard untuk mengumpulkan data sensor.
                    </p>
                  )}
                </div>
              )}
            </div>
          )}
        </div>

        {/* Pagination info */}
        {filteredData.length > 0 && (
          <div className="mt-6 flex flex-col sm:flex-row justify-between items-center text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
            <div className="mb-2 sm:mb-0">
              Menampilkan {filteredData.length} data
              {historicalData.length > 0
                ? ` dari total ${historicalData.length} data (Real-time)`
                : ` dari data simulasi`}
            </div>
            <div className="text-xs text-gray-500">
              * Data diperbarui secara real-time dari Sensor
            </div>
          </div>
        )}

        {/* Data Source Info */}
        <div className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
          <p className="text-xs text-blue-800">
            <strong>📊 Sumber Data:</strong>{" "}
            {historicalData.length > 0
              ? `${historicalData.length} record real-time dari sensor`
              : "Data simulasi untuk demo"}
          </p>
          {historicalData.length > 0 && (
            <p className="text-xs text-blue-600 mt-1">
              Data terbaru:{" "}
              {new Date(historicalData[0]?.time || Date.now()).toLocaleString()}
            </p>
          )}
        </div>
      </div>
    </Layout>
  );
}
